## For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
#
#name: Java CI with Gradle
#
#on:
#  pull_request:
#    branches: [ "master", "develop" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#    env :
#      working-directory: ./
#      APPLICATION: ${{ secrets.APPLICATION }}
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: gradle
#
#      - name: create application yaml
#        run: |
#          touch ./src/main/resources/application.yml
#          echo "${{env.APPLICATION}}" > ./src/main/resources/application.yml
#      - uses: actions/upload-artifact@v3
#        with:
#          name: application.yml
#          path: ./src/main/resources/application.yml
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#        working-directory: ${{ env.working-directory }}
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#
### This workflow uses actions that are not certified by GitHub.
### They are provided by a third-party and are governed by
### separate terms of service, privacy policy, and support
### documentation.
### This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
### For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
##
##name: Java CI with Gradle
##
##on:
##  push:
##    branches: [ "master" ]
###   pull_request:
###     branches: [ "develop" ]
##
##permissions:
##  contents: read
##
##jobs:
##  build:
##
##    runs-on: ubuntu-latest
##
##    steps:
##      - uses: actions/checkout@v3
##      - name: Set up JDK 17
##        uses: actions/setup-java@v3
##        with:
##          java-version: '17'
##          distribution: 'temurin'
##
##      - name: make application.properties
##        run: |
##          cd ./src/main/resources
##          touch ./application.properties
##          echo "${{ secrets.PROPERTIES }}" > ./application.properties
##        shell: bash
##
##      - name: Grant execute permission for gradlew
##        run: chmod +x gradlew
##
##      - name: Build with Gradle
##        run: ./gradlew build
##
##
##      - name: Docker build
##        run: |
##          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
##          docker build -t groomingmood .
##          docker tag groomingmood groomingmood/groomingmood:${GITHUB_SHA::7}
##          docker push groomingmood/groomingmood:${GITHUB_SHA::7}
##      - name: Deploy
##        uses: appleboy/ssh-action@master
##        with:
##          host: ec2-52-196-145-123.ap-northeast-1.compute.amazonaws.com
##          username: ec2-user
##          key: ${{ secrets.PRIVATE_KEY }}
##          envs: GITHUB_SHA
##
##          script: |
##            docker pull groomingmood/groomingmood:${GITHUB_SHA::7}
##            docker tag groomingmood/groomingmood:${GITHUB_SHA::7} grooming-mood
##            docker stop server
##            docker network create -d bridge test
##            docker run -d --network test --network-alias mysql -v  /build/DB/mysql:/var/lib/mysql --name mysqlDB -e MYSQL_DATABASE=anonymous_board -e MYSQL_USER=${{ secrets.DOCKER_USERNAME }} -e MYSQL_PASSWORD=${{ secrets.DOCKER_PASSWORD }} -e MYSQL_ROOT_PASSWORD=${{ secrets.DOCKER_PASSWORD }} -p 3306:3306 mysql
##            docker run -d --rm --name server -p 8080:8080 grooming-mood
